Index: src/main/java/org/example/pathfinder/Service/Services.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.pathfinder.Service;\r\n\r\nimport java.util.List;\r\n\r\npublic interface Services<T> {\r\n    // Create or add an entity\r\n    void add(T entity);\r\n\r\n    // Update an existing entity\r\n    void update(T entity);\r\n\r\n    // Delete an entity by its ID\r\n    void delete(int id);\r\n\r\n    // Retrieve an entity by its ID\r\n    T getById(int id);\r\n\r\n    // Retrieve all entities\r\n    List<T> getAll();\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/pathfinder/Service/Services.java b/src/main/java/org/example/pathfinder/Service/Services.java
--- a/src/main/java/org/example/pathfinder/Service/Services.java	(revision 8cdb4b33ee7caa87b4e8ca48e52e0f7e582e84ba)
+++ b/src/main/java/org/example/pathfinder/Service/Services.java	(date 1740690910326)
@@ -3,18 +3,12 @@
 import java.util.List;
 
 public interface Services<T> {
-    // Create or add an entity
-    void add(T entity);
+    public void add(T t);
+    public void update(T t);
 
-    // Update an existing entity
-    void update(T entity);
+    public void delete(long a);
 
-    // Delete an entity by its ID
-    void delete(int id);
+    public List<T> getall();
 
-    // Retrieve an entity by its ID
-    T getById(int id);
-
-    // Retrieve all entities
-    List<T> getAll();
-}
+    public T getone();
+}
\ No newline at end of file
Index: src/main/java/org/example/pathfinder/Controller/JobOfferListController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.example.pathfinder.Controller;\r\n\r\nimport com.mysql.cj.xdevapi.JsonArray;\r\nimport javafx.application.Platform;\r\nimport javafx.collections.FXCollections;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.event.Event;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.layout.StackPane;\r\nimport javafx.scene.layout.VBox;\r\nimport javafx.stage.Modality;\r\nimport javafx.stage.Stage;\r\nimport org.example.pathfinder.Model.JobOffer;\r\nimport org.example.pathfinder.Model.LoggedUser;\r\nimport org.example.pathfinder.Service.ApplicationService;\r\nimport org.example.pathfinder.Service.JobOfferService;\r\nimport org.json.JSONArray;\r\nimport org.json.JSONException;\r\nimport org.json.JSONObject;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.Reader;\r\nimport java.net.HttpURLConnection;\r\nimport java.net.URI;\r\nimport java.net.URL;\r\nimport java.net.http.HttpClient;\r\nimport java.net.http.HttpRequest;\r\nimport java.net.http.HttpResponse;\r\nimport java.util.ArrayList;\r\nimport java.util.HashMap;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.concurrent.atomic.AtomicInteger;\r\nimport java.util.function.BiConsumer;\r\nimport java.util.function.Consumer;\r\nimport java.util.stream.Collectors;\r\n\r\npublic class JobOfferListController {\r\n\r\n    @FXML\r\n    private GridPane jobOfferGridPane;  // Use GridPane instead of TilePane\r\n\r\n    @FXML\r\n    private Button addJobOfferButton;\r\n\r\n    @FXML\r\n    private ImageView searchIcon;\r\n\r\n    @FXML\r\n    private Button btnViewApplications;\r\n\r\n    @FXML\r\n    private ComboBox filterComboBox;\r\n\r\n    @FXML\r\n    private TextField searchField;\r\n   // @FXML\r\n   // private TextField citySearchField;\r\n    @FXML\r\n    private ComboBox<String> searchFilter;\r\n\r\n    ApplicationService applicationService = new ApplicationService();\r\n\r\n    private JobOfferService jobOfferService;\r\n    private ObservableList<JobOffer> jobOffers;\r\n    private String loggedUserRole = LoggedUser.getInstance().getRole();\r\n    private long loggedInUserId = LoggedUser.getInstance().getUserId();\r\n    private static final String GEONAMES_API_URL = \"http://api.geonames.org/searchJSON?q=%s&maxRows=10&username=nourmontasser\";\r\n\r\n\r\n   /* @FXML\r\n    private ComboBox<String> cityComboBox;*/\r\n    @FXML\r\n    public void initialize() {\r\n        String imagePath = String.valueOf(getClass().getResource(\"/org/example/pathfinder/view/Sources/pathfinder_logo_compass.png\"));\r\n        searchIcon.setImage(new Image(imagePath));\r\n        jobOfferService = new JobOfferService();\r\n        jobOffers = FXCollections.observableArrayList();\r\n        loadJobOffers();\r\n        refreshJobOfferList();\r\n        if (\"COMPANY\".equals(loggedUserRole)) {\r\n            // For companies, show only \"Show My Job Offers\" and \"Show All Job Offers\"\r\n            filterComboBox.setItems(FXCollections.observableArrayList(\r\n                    \"Show My Job Offers\",\r\n                    \"Show All Job Offers\"\r\n            ));\r\n        } else if (\"SEEKER\".equals(loggedUserRole)) {\r\n            // For seekers, show all options\r\n            filterComboBox.setItems(FXCollections.observableArrayList(\r\n                    \"Part-time\",\r\n                    \"Full-time\",\r\n                    \"Fixed-term contract\",\r\n                    \"Long-term contract\",\r\n                    \"Show All Job Offers\"\r\n            ));\r\n        }\r\n        if (loggedUserRole.equals(\"COMPANY\")) {\r\n            btnViewApplications.setVisible(false);  // Hide the applications button for companies\r\n            filterComboBox.setOnAction(event -> {\r\n                String selectedFilter = filterComboBox.getSelectionModel().getSelectedItem().toString();\r\n                // Call method to filter job offers based on the selected option\r\n                filterJobOffersForCompany(selectedFilter);\r\n            });\r\n        } else if (loggedUserRole.equals(\"SEEKER\")) {\r\n            filterComboBox.setVisible(true);  // Make it visible for seekers\r\n            filterComboBox.setOnAction(event -> {\r\n                String selectedFilter = filterComboBox.getSelectionModel().getSelectedItem().toString();\r\n                // Call method to filter job offers based on the selected option for seekers\r\n                filterJobOffersForSeeker(selectedFilter);\r\n            });\r\n            addJobOfferButton.setVisible(false);  // Hide add button for seekers\r\n        }\r\n\r\n\r\n        searchField.textProperty().addListener((observable, oldValue, newValue) -> {\r\n            if (searchFilter.getValue().equals(\"By City\")) {\r\n                if (newValue.isEmpty()) {\r\n                    jobOffers.setAll(jobOfferService.getall()); // Reset list when field is empty\r\n                    refreshJobOfferList();\r\n                    cityContextMenu.hide();\r\n                } else if (newValue.length() > 2) {\r\n                    fetchCities(newValue); // Fetch cities only if more than 2 characters\r\n                }\r\n            } else {\r\n                filterJobOffersBySearch(newValue);\r\n            }\r\n        });\r\n\r\n\r\n        // Handle selection of a city from the ComboBox\r\n       /* cityComboBox.setOnAction(event -> {\r\n            String selectedCity = cityComboBox.getValue();\r\n            if (selectedCity != null) {\r\n                searchField.setText(selectedCity);  // Set the selected city into the search field\r\n                cityComboBox.setVisible(false); // Hide the ComboBox after selection\r\n                // Optionally, fetch the city's coordinates or use the selected city in your logic\r\n            }\r\n        });*/\r\n\r\n\r\n\r\n        // Listen to width changes for responsive design\r\n        jobOfferGridPane.widthProperty().addListener((obs, oldWidth, newWidth) -> refreshJobOfferList());\r\n    }\r\n\r\n    private void filterJobOffersBySearch(String searchText) {\r\n        if (searchText == null || searchText.trim().isEmpty()) {\r\n            jobOffers.setAll(jobOfferService.getall()); // Recharger toutes les offres si le champ est vide\r\n        } else {\r\n            String lowerCaseSearch = searchText.toLowerCase();\r\n\r\n            ObservableList<JobOffer> filteredList = FXCollections.observableArrayList(\r\n                    jobOfferService.getall().stream()\r\n                            .filter(jobOffer -> jobOffer.getTitle() != null && jobOffer.getTitle().toLowerCase().contains(lowerCaseSearch))\r\n                            .collect(Collectors.toList())\r\n            );\r\n\r\n\r\n            jobOffers.setAll(filteredList);\r\n        }\r\n        //System.out.println(\"Search text: \" + searchText);\r\n       // System.out.println(\"Filtered list size: \" + jobOffers.size());\r\n        refreshJobOfferList();\r\n    }\r\n\r\n    private void filterJobOffersForCompany(String filter) {\r\n        if (\"Show My Job Offers\".equals(filter)) {\r\n            // Load only job offers belonging to the logged-in user (company)\r\n            jobOffers.setAll(jobOfferService.getByUserId(loggedInUserId));\r\n        } else if (\"Show All Job Offers\".equals(filter)) {\r\n            // Load all job offers\r\n            jobOffers.setAll(jobOfferService.getall());\r\n        }\r\n        refreshJobOfferList(); // Refresh UI with new list\r\n    }\r\n\r\n\r\n    private void filterJobOffersForSeeker(String filter) {\r\n        if (\"Full-time\".equals(filter)) {\r\n            // Filter for full-time positions\r\n            jobOffers.setAll(jobOfferService.getByJobType(\"Full-time\"));\r\n        } else if (\"Part-time\".equals(filter)) {\r\n            // Filter for part-time positions\r\n            jobOffers.setAll(jobOfferService.getByJobType(\"Part-time\"));\r\n        }\r\n        else if (\"Fixed-term contract\".equals(filter)) {\r\n            jobOffers.setAll(jobOfferService.getByJobType(\"Fixed-term contract\"));\r\n        } else if (\"Long-term contract\".equals(filter)) {\r\n            jobOffers.setAll(jobOfferService.getByJobType(\"Long-term contract\"));\r\n        } else if (\"Show All Job Offers\".equals(filter)) {\r\n            // Load all job offers\r\n            jobOffers.setAll(jobOfferService.getall());\r\n        }\r\n\r\n        refreshJobOfferList(); // Refresh UI with new list\r\n    }\r\n\r\n\r\n    @FXML\r\n    public void handleAddJobOffer() {\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/org/example/pathfinder/view/Frontoffice/JobOfferForm.fxml\"));\r\n            VBox form = loader.load();\r\n\r\n            Stage stage = new Stage();\r\n            stage.setTitle(\"Add Job Offer\");\r\n            stage.initModality(Modality.APPLICATION_MODAL);  // Block interaction with other windows\r\n            stage.setScene(new Scene(form));\r\n\r\n            // Make window non-resizable and remove default decorations (close button, etc.)\r\n            stage.initStyle(javafx.stage.StageStyle.UNDECORATED);\r\n\r\n            // Create an overlay for the transparent effect\r\n            StackPane overlay = new StackPane();\r\n            overlay.setStyle(\"-fx-background-color: rgba(0, 0, 0, 0.3);\");  // Semi-transparent background\r\n\r\n            overlay.getChildren().add(form);\r\n\r\n            Scene overlayScene = new Scene(overlay);\r\n\r\n            // Prevent window from being moved\r\n            stage.setResizable(false);\r\n            stage.setScene(overlayScene);\r\n            stage.showAndWait();\r\n\r\n            // Refresh the job offer list after closing the form\r\n            loadJobOffers();\r\n            refreshJobOfferList();\r\n        } catch (IOException e) {\r\n            System.err.println(\"Error opening Add Job Offer form: \" + e.getMessage());\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    public void refreshJobOfferList() {\r\n        jobOfferGridPane.getChildren().clear();  // Clear existing cards\r\n\r\n        int columns = 3;  // Number of columns\r\n        int row = 0;\r\n        int col = 0;\r\n\r\n        double gridWidth = jobOfferGridPane.getWidth();  // Get the current width of the GridPane\r\n        double cardWidth = (gridWidth - (columns - 1) * 10) / columns;  // Calculate width for each card (including gaps)\r\n        double cardHeight = 150;  // Fixed height for the cards\r\n\r\n        for (JobOffer jobOffer : jobOffers) {\r\n            try {\r\n                FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/org/example/pathfinder/view/Frontoffice/JobOfferListCard.fxml\"));\r\n                VBox card = loader.load();\r\n\r\n               /*String css = getClass().getResource(\"/org/example/pathfinder/view/Frontoffice/styles.css\").toExternalForm();\r\n                card.getStylesheets().add(css);*/\r\n\r\n                JobOfferListCardController controller = loader.getController();\r\n                controller.setJobOffer(jobOffer);\r\n                controller.setParentController(this);\r\n\r\n                // Set calculated size for the card\r\n                card.setPrefSize(cardWidth, cardHeight);\r\n\r\n                // Add the card to the GridPane\r\n                jobOfferGridPane.add(card, col, row);\r\n                GridPane.setMargin(card, new javafx.geometry.Insets(10));  // Add spacing\r\n\r\n                col++;\r\n                if (col == columns) {\r\n                    col = 0;\r\n                    row++;\r\n                }//System.out.println(\"GridPane width: \" + jobOfferGridPane.getWidth());\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private void loadJobOffers() {\r\n        jobOffers.setAll(jobOfferService.getall());\r\n    }\r\n\r\n    public ObservableList<JobOffer> getJobOffers() {\r\n        return jobOffers;\r\n    }\r\n\r\n\r\n\r\n\r\n    @FXML\r\n    private void handleViewApplications() {\r\n        try {\r\n            // Charger la vue principale (navbar + contentArea)\r\n            FXMLLoader frontOfficeLoader = new FXMLLoader(getClass().getResource(\"/org/example/pathfinder/view/Frontoffice/main-frontoffice.fxml\"));\r\n            Parent frontOfficeView = frontOfficeLoader.load();\r\n            FrontOfficeController frontOfficeController = frontOfficeLoader.getController();\r\n\r\n            // Charger la liste des applications et l'injecter dans contentArea\r\n            Parent applicationListView = FXMLLoader.load(getClass().getResource(\"/org/example/pathfinder/view/Frontoffice/ApplicationList.fxml\"));\r\n            frontOfficeController.loadView(applicationListView); // Fonction à ajouter dans FrontOfficeController\r\n\r\n            // Obtenir la fenêtre actuelle (Stage)\r\n            Stage stage = (Stage) searchIcon.getScene().getWindow();\r\n\r\n            // Recréer la scène avec le nouveau contenu\r\n            Scene newScene = new Scene(frontOfficeView);\r\n            newScene.getStylesheets().add(getClass().getResource(\"/org/example/pathfinder/view/Frontoffice/styles.css\").toExternalForm());\r\n\r\n            // Appliquer la nouvelle scène et forcer le redimensionnement\r\n            stage.setScene(newScene);\r\n            stage.setMaximized(false);\r\n            stage.setMaximized(true);\r\n\r\n            stage.show();\r\n\r\n        } catch (IOException e) {\r\n            showError(\"Error opening application list view: \" + e.getMessage());\r\n        }\r\n    }\r\n\r\n\r\n    private void showError(String message) {\r\n        Alert alert = new Alert(Alert.AlertType.ERROR);\r\n        alert.setTitle(\"Error\");\r\n        alert.setHeaderText(null);\r\n        alert.setContentText(message);\r\n        alert.showAndWait();\r\n    }\r\n    //************************************************************\r\n    private final String GEONAMES_USERNAME = \"nourmontasser\";\r\n\r\n    private void fetchCities(String query) {\r\n        String apiUrl = String.format(GEONAMES_API_URL, query);\r\n        HttpRequest request = HttpRequest.newBuilder()\r\n                .uri(URI.create(apiUrl))\r\n                .build();\r\n\r\n        HttpClient.newHttpClient().sendAsync(request, HttpResponse.BodyHandlers.ofString())\r\n                .thenAccept(response -> {\r\n                    if (response.statusCode() == 200) {\r\n                        handleCityResponse(response.body());\r\n                    }\r\n                });\r\n\r\n    }\r\n\r\n    private ContextMenu cityContextMenu = new ContextMenu(); // Keep a single context menu\r\n\r\n    private void handleCityResponse(String responseBody) {\r\n        try {\r\n            JSONObject jsonResponse = new JSONObject(responseBody);\r\n            JSONArray cities = jsonResponse.getJSONArray(\"geonames\");\r\n            List<String> cityNames = new ArrayList<>();\r\n\r\n            for (int i = 0; i < cities.length(); i++) {\r\n                JSONObject city = cities.getJSONObject(i);\r\n                String cityName = city.getString(\"name\");\r\n                cityNames.add(cityName);\r\n            }\r\n\r\n            Platform.runLater(() -> {\r\n                cityContextMenu.getItems().clear(); // Clear previous suggestions\r\n\r\n                if (!cityNames.isEmpty()) {\r\n                    for (String city : cityNames) {\r\n                        MenuItem menuItem = new MenuItem(city);\r\n                        menuItem.setOnAction(event -> {\r\n                            searchField.setText(city); // Set selected city\r\n                            cityContextMenu.hide();\r\n\r\n                            // Fetch coordinates and filter job offers\r\n                            fetchCityCoordinates(city, (selectedLat, selectedLng) -> {\r\n                                System.out.println(\"Selected city coordinates: \" + selectedLat + \", \" + selectedLng);\r\n                                filterJobOffersByDistance(selectedLat, selectedLng);\r\n                            });\r\n                        });\r\n                        cityContextMenu.getItems().add(menuItem);\r\n                    }\r\n\r\n                    if (!cityContextMenu.isShowing()) {\r\n                        cityContextMenu.show(searchField, javafx.geometry.Side.BOTTOM, 0, 0);\r\n                    }\r\n                } else {\r\n                    cityContextMenu.hide();\r\n                }\r\n            });\r\n\r\n        } catch (JSONException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    private void fetchCityCoordinates(String cityName, BiConsumer<Double, Double> callback) {\r\n        String apiUrl = String.format(GEONAMES_API_URL, cityName);\r\n        HttpRequest request = HttpRequest.newBuilder()\r\n                .uri(URI.create(apiUrl))\r\n                .build();\r\n\r\n        HttpClient.newHttpClient().sendAsync(request, HttpResponse.BodyHandlers.ofString())\r\n                .thenAccept(response -> {\r\n                    if (response.statusCode() == 200) {\r\n                        try {\r\n                            JSONObject jsonResponse = new JSONObject(response.body());\r\n                            JSONArray cities = jsonResponse.getJSONArray(\"geonames\");\r\n\r\n                            if (cities.length() > 0) {\r\n                                JSONObject city = cities.getJSONObject(0);\r\n                                double lat = city.getDouble(\"lat\");\r\n                                double lng = city.getDouble(\"lng\");\r\n\r\n                                // Pass the coordinates to the callback\r\n                                callback.accept(lat, lng);\r\n                            }\r\n                        } catch (JSONException e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                    }\r\n                });\r\n    }\r\n\r\n    private void filterJobOffersByDistance(double selectedLat, double selectedLng) {\r\n        List<JobOffer> filteredJobs = new ArrayList<>();\r\n        Map<String, double[]> cityCoordinatesCache = new HashMap<>(); // Cache to avoid multiple API calls\r\n\r\n        // Iterate over job offers\r\n        for (JobOffer job : jobOffers) {\r\n            String address = job.getAddress();\r\n           // System.out.println(job);\r\n            if (address == null || !address.contains(\",\")) {\r\n                continue; // Skip if no address or invalid format\r\n            }\r\n\r\n            String jobCity = address.split(\",\")[1].trim(); // Extract city name\r\n                // Fetch city coordinates asynchronously if not cached\r\n                fetchCityCoordinates(jobCity, (lat, lng) -> {\r\n                    cityCoordinatesCache.put(jobCity, new double[]{lat, lng});\r\n                    double distance = calculateDistance(selectedLat, selectedLng, lat, lng);\r\n                    System.out.println(\"Distance1: \" + distance);\r\n                    if (distance <= 200) {\r\n                        filteredJobs.add(job);\r\n                    }\r\n                    updateJobOffers(filteredJobs); // Update after all cities processed\r\n                });\r\n\r\n        }\r\n    }\r\n\r\n    private void updateJobOffers(List<JobOffer> filteredJobs) {\r\n        Platform.runLater(() -> {\r\n            jobOffers.setAll(filteredJobs);\r\n            refreshJobOfferList();\r\n        });\r\n    }\r\n\r\n    private double calculateDistance(double lat1, double lon1, double lat2, double lon2) {\r\n        final int R = 6371; // Earth's radius in km\r\n        double dLat = Math.toRadians(lat2 - lat1);\r\n        double dLon = Math.toRadians(lon2 - lon1);\r\n        double a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n                Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) *\r\n                        Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n        return R * c; // Distance in km\r\n    }\r\n\r\n\r\n    // Method to handle hover effects for Buttons\r\n// Method to handle hover effects for Buttons\r\n    public void handleButtonHoverEnter(Event event) {\r\n        Button button = (Button) event.getSource();\r\n        button.setStyle(\"-fx-background-color: #5b3f29; \" // change background color to green\r\n                + \"-fx-text-fill: white; \"          // set text color to white\r\n                + \"-fx-font-size: 16px; \"          // set font size\r\n                + \"-fx-font-weight: bold; \"        // set font weight to bold\r\n                + \"-fx-padding: 10px 20px; \"       // padding around the text\r\n                + \"-fx-border-radius: 25px; \"     // rounded corners\r\n                + \"-fx-cursor: hand; \"            // hand cursor to indicate clickable\r\n                + \"-fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.2), 10, 0, 2, 2);\"); // shadow effect\r\n    }\r\n\r\n    // Method to handle hover exit effects for Buttons\r\n    public void handleButtonHoverExit(Event event) {\r\n        Button button = (Button) event.getSource();\r\n        button.setStyle(\"-fx-background-color: #3b261d; \"   // reset background color\r\n                + \"-fx-text-fill: white; \"          // keep text color white\r\n                + \"-fx-font-size: 16px; \"          // keep font size\r\n                + \"-fx-font-weight: bold; \"        // keep font weight bold\r\n                + \"-fx-padding: 10px 20px; \"       // keep padding around text\r\n                + \"-fx-border-radius: 25px; \"     // keep rounded corners\r\n                + \"-fx-cursor: hand; \"            // keep hand cursor\r\n                + \"-fx-effect: dropshadow(gaussian, rgba(0, 0, 0, 0.2), 10, 0, 2, 2);\"); // keep shadow effect\r\n    }\r\n\r\n    public void handleTextFieldHoverEnter(Event event) {\r\n        TextField textField = (TextField) event.getSource();\r\n        textField.setStyle(\"-fx-background-color: #f0f0f0; \"  // light gray background on hover\r\n                + \"-fx-border-color: #3b261d; \"   // border color to match button\r\n                + \"-fx-border-width: 2px; \"       // make border a bit thicker\r\n                + \"-fx-cursor: text;\");           // change cursor to text input\r\n    }\r\n\r\n    public void handleTextFieldHoverExit(Event event) {\r\n        TextField textField = (TextField) event.getSource();\r\n        textField.setStyle(\"-fx-background-color: transparent; \"  // reset to transparent background\r\n                + \"-fx-border-color: #ccc; \"   // default border color\r\n                + \"-fx-border-width: 0px; \"    // remove border width\r\n                + \"-fx-cursor: text;\");        // cursor remains as text input\r\n    }\r\n\r\n    // Method to handle hover effects for ComboBox\r\n    public void handleComboBoxHoverEnter(Event event) {\r\n        ComboBox comboBox = (ComboBox) event.getSource();\r\n        comboBox.setStyle(\"-fx-background-color: #f0f0f0; \"  // light gray background on hover\r\n                + \"-fx-border-color: #3b261d; \"   // border color to match button\r\n                + \"-fx-border-width: 2px; \"       // make border a bit thicker\r\n                + \"-fx-cursor: hand;\");           // change cursor to indicate clickable\r\n    }\r\n\r\n    // Method to handle hover exit effects for ComboBox\r\n    public void handleComboBoxHoverExit(Event event) {\r\n        ComboBox comboBox = (ComboBox) event.getSource();\r\n        comboBox.setStyle(\"-fx-background-color: transparent; \"  // reset to transparent background\r\n                + \"-fx-border-color: #ccc; \"   // default border color\r\n                + \"-fx-border-width: 0px; \"    // remove border width\r\n                + \"-fx-cursor: hand;\");        // cursor remains as hand cursor\r\n    }\r\n\r\n    // Method to handle hover effects for ImageView (e.g., icons)\r\n    public void handleImageViewHoverEnter(Event event) {\r\n        ImageView imageView = (ImageView) event.getSource();\r\n        imageView.setStyle(\"-fx-opacity: 0.8; \");  // reduce opacity to indicate hover effect\r\n    }\r\n\r\n    // Method to handle hover exit effects for ImageView (e.g., icons)\r\n    public void handleImageViewHoverExit(Event event) {\r\n        ImageView imageView = (ImageView) event.getSource();\r\n        imageView.setStyle(\"-fx-opacity: 1; \");  // reset opacity back to normal\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/org/example/pathfinder/Controller/JobOfferListController.java b/src/main/java/org/example/pathfinder/Controller/JobOfferListController.java
--- a/src/main/java/org/example/pathfinder/Controller/JobOfferListController.java	(revision 8cdb4b33ee7caa87b4e8ca48e52e0f7e582e84ba)
+++ b/src/main/java/org/example/pathfinder/Controller/JobOfferListController.java	(date 1740690723538)
@@ -1,6 +1,5 @@
 package org.example.pathfinder.Controller;
 
-import com.mysql.cj.xdevapi.JsonArray;
 import javafx.application.Platform;
 import javafx.collections.FXCollections;
 import javafx.collections.ObservableList;
